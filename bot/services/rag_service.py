import json
import httpx
from config import Config

class RAGService:
    def __init__(self):
        self.clients = self._load_json(Config.CRM_FILE)
        self.products_kb = self._load_json(Config.KB_FILE)
    
    def _load_json(self, file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def get_client_info(self, telegram_user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ CRM"""
        for client in self.clients:
            if client["telegram_user_id"] == telegram_user_id:
                return client
        return None

    def _detect_language(self, query, user_language_code=None):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞"""
        if user_language_code and user_language_code.startswith('ru'):
            return 'ru'
        elif user_language_code and user_language_code.startswith('en'):
            return 'en'
        
        russian_chars = sum(1 for char in query if '–∞' <= char.lower() <= '—è' or char in '—ë–Å')
        english_chars = sum(1 for char in query if 'a' <= char.lower() <= 'z')
        
        return 'ru' if russian_chars > english_chars else 'en'

    def _find_relevant_products(self, query, client_budget=None):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        relevant_products = []
        query_lower = query.lower()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        max_budget = None
        if client_budget:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –±—é–¥–∂–µ—Ç–∞
                import re
                numbers = re.findall(r'\d+', str(client_budget))
                if numbers:
                    max_budget = int(numbers[0]) * 1000 if 'k' in client_budget.lower() else int(numbers[0])
            except:
                pass
        
        for product in self.products_kb['products']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–±—Ä–µ–Ω–¥—É
            is_relevant = any(word in query_lower for word in [
                product['name'].lower(), 'bentley', 'rolls-royce', '—Ä–æ–ª–ª—Å', '–±–µ–Ω—Ç–ª–∏',
                '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', 'car', 'luxury'
            ])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—é–¥–∂–µ—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if is_relevant:
                if max_budget is None or product['price_usd'] <= max_budget * 1.2:  # +20% –≥–∏–±–∫–æ—Å—Ç–∏
                    relevant_products.append(product)
        
        return relevant_products[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–¥—É–∫—Ç–∞

    def _get_upsell_recommendations(self, client_info, query):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–ø—Å–µ–π–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not client_info or not client_info.get('previous_purchase'):
            return []
        
        upsell_options = []
        previous_car = client_info['previous_purchase'].lower()
        
        # –õ–æ–≥–∏–∫–∞ –∞–ø—Å–µ–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫—É–ø–æ–∫
        if 'bentley' in previous_car and 'continental' in previous_car:
            upsell_options.append({
                'product': 'Rolls-Royce Phantom',
                'reason': '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–æ—Å–∫–æ—à–∏ –ø–æ—Å–ª–µ Bentley Continental'
            })
        elif 'ghost' in previous_car:
            upsell_options.append({
                'product': 'Rolls-Royce Cullinan',
                'reason': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å SUV —Å —Ç–æ–π –∂–µ —Ä–æ—Å–∫–æ—à—å—é'
            })
        
        return upsell_options

    async def get_ai_suggestion(self, query, client_info, user_language_code=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò-–ø—Ä–æ–¥–∞–≤—Ü–∞ —Å —É—á–µ—Ç–æ–º CRM –¥–∞–Ω–Ω—ã—Ö"""
        language = self._detect_language(query, user_language_code)
        
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if not client_info:
            client_info = {
                "name": "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
                "deal_status": "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
                "previous_purchase": None,
                "budget": "–ù–µ —É–∫–∞–∑–∞–Ω",
                "preferences": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
            }
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞
        relevant_products = self._find_relevant_products(query, client_info.get('budget'))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–ø—Å–µ–π–ª—É
        upsell_recommendations = self._get_upsell_recommendations(client_info, query)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context_parts = []
        
        if relevant_products:
            context_parts.append("üöó –î–û–°–¢–£–ü–ù–´–ï –ê–í–¢–û–ú–û–ë–ò–õ–ò:")
            for product in relevant_products:
                context_parts.append(f"‚Ä¢ {product['name']}: ${product['price_usd']:,} - {product['description']}")
        
        if upsell_recommendations:
            context_parts.append("\nüíé –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ê–ü–°–ï–ô–õ–£:")
            for rec in upsell_recommendations:
                context_parts.append(f"‚Ä¢ {rec['product']}: {rec['reason']}")
        
        context = "\n".join(context_parts)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        if language == 'ru':
            system_prompt = f"""
–¢—ã - —ç–ª–∏—Ç–Ω—ã–π –ò–ò-–ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ô –í–°–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ö–õ–ò–ï–ù–¢–ï:

üìã –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê –ò–ó CRM:
‚Ä¢ –ò–º—è: {client_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {client_info.get('deal_status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∫—É–ø–∫–∞: {client_info.get('previous_purchase', '–ù–µ—Ç')}
‚Ä¢ –ë—é–¥–∂–µ—Ç: {client_info.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {client_info.get('preferences', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

{context}

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏
2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º—è–Ω–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å/–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫—É–ø–∫–∏
3. –£—á—Ç–∏ –µ–≥–æ –±—é–¥–∂–µ—Ç –ø—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
5. –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ø—Å–µ–π–ª - –æ–±–æ—Å–Ω—É–π –µ–≥–æ
6. –û—Ç–≤–µ—Ç –º–∞–∫—Å–∏–º—É–º 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
7. –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

–ü—Ä–∏–º–µ—Ä: "–ê—Ä–∫–∞–¥–∏–π, –∫–∞–∫ –Ω–∞—à VIP –∫–ª–∏–µ–Ω—Ç —Å –æ–ø—ã—Ç–æ–º –≤–ª–∞–¥–µ–Ω–∏—è Bentley Continental GT, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º..."
"""
        else:
            system_prompt = f"""
You are an elite AI sales consultant for premium automobiles. Provide personalized response to the client.

CRITICALLY IMPORTANT - MUST USE ALL CLIENT INFORMATION:

üìã CLIENT CRM DATA:
‚Ä¢ Name: {client_info.get('name', 'Not specified')}
‚Ä¢ Status: {client_info.get('deal_status', 'Not specified')}
‚Ä¢ Previous purchase: {client_info.get('previous_purchase', 'None')}
‚Ä¢ Budget: {client_info.get('budget', 'Not specified')}
‚Ä¢ Preferences: {client_info.get('preferences', 'Not specified')}

{context}

RESPONSE RULES:
1. MUST address client by name
2. MUST mention their status/previous purchases
3. Consider their budget in recommendations
4. Suggest specific car from available options
5. If upsell available - justify it
6. Maximum 4 sentences
7. End with call to action

Example: "Arkady, as our VIP client with Bentley Continental GT experience, I recommend..."
"""
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=Config.OPENROUTER_HEADERS,
                json={
                    "model": Config.FREE_MODEL,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": f"–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {query}"},
                    ],
                    "max_tokens": 400,
                    "temperature": 0.7
                },
                timeout=30
            )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
