import logging
from telegram import Update
from telegram.ext import ContextTypes

from bot.services.rag_service import RAGService
from bot.services.call_analyzer import CallAnalyzer
from bot.services.script_generator import ScriptGenerator
from config import Config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –æ–¥–∏–Ω —Ä–∞–∑
rag_service = RAGService()
call_analyzer = CallAnalyzer()
script_generator = ScriptGenerator()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def add_test_user_to_crm(user_id, first_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    test_user = {
        "client_id": 999,
        "telegram_user_id": user_id,
        "name": first_name or "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
        "previous_purchase": "Bentley Continental GT (2022)",
        "budget": "400000 USD",
        "deal_status": "VIP –∫–ª–∏–µ–Ω—Ç",
        "preferences": "–°–∫–æ—Ä–æ—Å—Ç—å, —Ä–æ—Å–∫–æ—à—å, –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "notes": "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∞–ø–≥—Ä–µ–π–¥–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "purchase_history": [
            {"car": "Bentley Continental GT", "year": 2022, "price": 280000}
        ]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    rag_service.clients.append(test_user)
    return test_user

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states[update.effective_user.id] = "sales"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if update.effective_user.language_code and update.effective_user.language_code.startswith('ru'):
        welcome_text = """üèÜ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Sales MVP!** 

–Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

**üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:**
‚Ä¢ `–∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞` - –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
‚Ä¢ `–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞` - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂
‚Ä¢ `–ø—Ä–æ–¥–∞–∂–∏` - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º (—Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

**üíº –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:**
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å: "–•–æ—á—É Bentley" –∏–ª–∏ "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç Rolls-Royce"

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""
    else:
        welcome_text = """üèÜ **Welcome to AI Sales MVP!** 

I'm your AI sales assistant for premium automobiles.

**üîß Available modes:**
‚Ä¢ `call analysis` - sales quality analysis  
‚Ä¢ `script generation` - create sales scripts
‚Ä¢ `sales` - automobile consultations (default mode)

**üíº Demo capabilities:**
Try typing: "Want Bentley" or "Interested in Rolls-Royce"

How can I help you?"""
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
    if "–∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞" in text or "call analysis" in text:
        user_states[user_id] = "analysis"
        if update.effective_user.language_code and update.effective_user.language_code.startswith('ru'):
            msg = """üîç **–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**

–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –Ø –æ–ø—Ä–µ–¥–µ–ª—é:
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–∞ (—Ö–æ—Ä–æ—à–∏–π/–ø–ª–æ—Ö–æ–π)
‚Ä¢ –ß—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∞ —á—Ç–æ –Ω–µ—Ç
‚Ä¢ 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞..."""
        else:
            msg = """üîç **Call analysis mode activated**

Send me call text for analysis. I will determine:
‚Ä¢ Call quality (good/bad)
‚Ä¢ What worked and what didn't
‚Ä¢ 3 specific improvement recommendations

Waiting for conversation text..."""
        await update.message.reply_text(msg, parse_mode='Markdown')
        return
        
    elif "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞" in text or "script generation" in text:
        user_states[user_id] = "script_gen"
        if update.effective_user.language_code and update.effective_user.language_code.startswith('ru'):
            msg = """üìù **–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫.

–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å:
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏"""
        else:
            msg = """üìù **Script generation mode activated**

Send any message and I'll create a professional sales script based on best practices.

Script will include:
‚Ä¢ Greeting and rapport building
‚Ä¢ Needs identification
‚Ä¢ Solution presentation
‚Ä¢ Objection handling
‚Ä¢ Deal closing"""
        await update.message.reply_text(msg, parse_mode='Markdown')
        return
        
    elif "–ø—Ä–æ–¥–∞–∂–∏" in text or "sales" in text:
        user_states[user_id] = "sales"
        if update.effective_user.language_code and update.effective_user.language_code.startswith('ru'):
            msg = """üíº **–†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º.
–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ Bentley, Rolls-Royce –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ª—é–∫—Å–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–∞—Ö.

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–•–æ—á—É Bentley"
‚Ä¢ "–ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç–µ –≤ –±—é–¥–∂–µ—Ç–µ $300k?"
‚Ä¢ "–ù—É–∂–µ–Ω —Å–µ–º–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∫–ª–∞—Å—Å–∞ –ª—é–∫—Å" """
        else:
            msg = """üíº **Sales mode activated**

I'm your personal AI consultant for premium automobiles.
Ask your question about Bentley, Rolls-Royce or other luxury brands.

Example queries:
‚Ä¢ "Want Bentley"
‚Ä¢ "What do you recommend for $300k budget?"
‚Ä¢ "Need luxury family car" """
        await update.message.reply_text(msg, parse_mode='Markdown')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    mode = user_states.get(user_id, "sales")
    
    if mode == "sales":
        await handle_sales(update, context)
    elif mode == "analysis":
        await handle_analysis(update, context)
    elif mode == "script_gen":
        await handle_script_gen(update, context)

async def handle_sales(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–∞–∂ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CRM –¥–∞–Ω–Ω—ã—Ö"""
    await update.message.reply_chat_action("typing")
    
    try:
        user_language_code = update.effective_user.language_code
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ CRM
        client_info = rag_service.get_client_info(user_id)
        
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ CRM, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if not client_info:
            client_info = add_test_user_to_crm(user_id, update.effective_user.first_name)
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        suggestion = await rag_service.get_ai_suggestion(
            update.message.text, 
            client_info, 
            user_language_code
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è CRM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        is_russian = user_language_code and user_language_code.startswith('ru')
        
        if is_russian:
            crm_info = f"""üìä **–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ CRM:**
‚Ä¢ **–ò–º—è:** {client_info['name']}
‚Ä¢ **–°—Ç–∞—Ç—É—Å:** {client_info['deal_status']}
‚Ä¢ **–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∫—É–ø–∫–∞:** {client_info.get('previous_purchase', '–ù–µ—Ç')}
‚Ä¢ **–ë—é–¥–∂–µ—Ç:** {client_info['budget']}
‚Ä¢ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:** {client_info.get('preferences', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

---

{suggestion}"""
        else:
            crm_info = f"""üìä **Client CRM Data:**
‚Ä¢ **Name:** {client_info['name']}
‚Ä¢ **Status:** {client_info['deal_status']}
‚Ä¢ **Previous Purchase:** {client_info.get('previous_purchase', 'None')}
‚Ä¢ **Budget:** {client_info['budget']}
‚Ä¢ **Preferences:** {client_info.get('preferences', 'Not specified')}

---

{suggestion}"""
        
        await update.message.reply_text(
            crm_info, 
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∂: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        if update.effective_user.language_code and update.effective_user.language_code.startswith('ru'):
            error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
        else:
            error_msg = "‚ùå An error occurred while processing your request. Please try again or rephrase your question."
            
        await update.message.reply_text(error_msg)

async def handle_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤"""
    await update.message.reply_chat_action("typing")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_russian = update.effective_user.language_code and update.effective_user.language_code.startswith('ru')
    
    if is_russian:
        processing_msg = "üîç **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–≤–æ–Ω–æ–∫...** \n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    else:
        processing_msg = "üîç **Analyzing call...** \n\nThis may take up to a minute. Please wait."
    
    status_message = await update.message.reply_text(processing_msg, parse_mode='Markdown')
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò
        analysis = await call_analyzer.analyze(update.message.text)
        
        if is_russian:
            response_text = f"""üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–∞**

üéØ **–ö–∞—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–∞:** {analysis['call_quality']}

üìù **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**
{analysis['analysis']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**
1Ô∏è‚É£ {analysis['recommendations'][0]}

2Ô∏è‚É£ {analysis['recommendations'][1]}

3Ô∏è‚É£ {analysis['recommendations'][2]}

---
üí¨ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        else:
            response_text = f"""üìä **Call Analysis Results**

üéØ **Call Quality:** {analysis['call_quality']}

üìù **Detailed Analysis:**
{analysis['analysis']}

üí° **Improvement Recommendations:**
1Ô∏è‚É£ {analysis['recommendations'][0]}

2Ô∏è‚É£ {analysis['recommendations'][1]}

3Ô∏è‚É£ {analysis['recommendations'][2]}

---
üí¨ To analyze another call, simply send another conversation text."""
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await status_message.delete()
        await update.message.reply_text(response_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        await status_message.delete()
        
        if is_russian:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º."
        else:
            error_msg = "‚ùå Failed to analyze the call. Make sure the text contains a dialogue between manager and client."
            
        await update.message.reply_text(error_msg)

async def handle_script_gen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_russian = update.effective_user.language_code and update.effective_user.language_code.startswith('ru')
    
    if is_russian:
        processing_msg = "üìù **–°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂...** \n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 90 —Å–µ–∫—É–Ω–¥. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏."
    else:
        processing_msg = "üìù **Creating professional sales script...** \n\nThis may take up to 90 seconds. Analyzing best practices."
    
    status_message = await update.message.reply_text(processing_msg, parse_mode='Markdown')
    await update.message.reply_chat_action("typing")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        with open(Config.CALLS_DIR / "example_call_good.txt", 'r', encoding='utf-8') as f:
            good_call_1 = f.read()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        script = await script_generator.generate([good_call_1])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await status_message.delete()
        
        if is_russian:
            header = """üìã **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂ —Å–æ–∑–¥–∞–Ω!**

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–æ–¥–∞–∂.

---

"""
            footer = """

---
üí° **–°–æ–≤–µ—Ç:** –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–¥ –≤–∞—à—É —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.
üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        else:
            header = """üìã **Professional Sales Script Created!**

Based on analysis of successful calls and sales best practices.

---

"""
            footer = """

---
üí° **Tip:** Adapt the script to your specifics and communication style.
üìù To create a new script, send any message."""
        
        full_response = header + script + footer
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(full_response) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [full_response[i:i+4000] for i in range(0, len(full_response), 4000)]
            for part in parts:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await update.message.reply_text(full_response, parse_mode='Markdown')
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        
        await status_message.delete()
        
        if is_russian:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        else:
            error_msg = "‚ùå Failed to create script. Please try again in a few seconds."
            
        await update.message.reply_text(error_msg)
